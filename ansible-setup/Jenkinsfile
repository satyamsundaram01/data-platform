// GitHub.com/moengage/data-platform/ansible-setup/jenkinsfile

pipeline {
    // agent any
    agent {
        label 'moe-dc01-spot-fleet'
    }

    environment {
        // --- Pipeline Parameters (define in Jenkins UI as 'Parameters') ---
        AWS_REGION = "${params.AWS_REGION}" // e.g., 'ap-south-1'
        SUBSERVICE_NAME = "${params.SUBSERVICE_NAME}" // e.g., 'oneshot'
        // ROUTE53_HOSTED_ZONE_ID will be derived, so it's no longer a direct parameter

        // --- Internal Paths and Credentials IDs ---
        REPO_NAME = 'data-platform'
        // ANSIBLE_SETUP_ROOT = "${WORKSPACE}/${REPO_NAME}/ansible-setup"
        ANSIBLE_SETUP_ROOT = 'ansible-setup'

        GITHUB_REPO_CRED_ID = 'github alice'
        AWS_EC2_SSH_KEY_CRED_ID = 'onlyDev'
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                script {
                    echo "Cloning repository: ${env.REPO_NAME} into ${WORKSPACE}"
                    // git branch: 'main', credentialsId: ${GITHUB_REPO_CRED_ID}, url: "git@github.com:satyamsundaram01/${REPO_NAME}.git"
                    // git branch: 'main', credentialsId: "'github alice'", url: "git@github.com:satyamsundaram01/${REPO_NAME}.git"
                    // git branch: 'main', credentialsId: /github alice/, url: "git@github.com:satyamsundaram01/${REPO_NAME}.git"
                    git branch: 'main', url: "https://github.com/satyamsundaram01/${REPO_NAME}.git"
                }
            }
        }

        stage('Setup Jenkins Agent Tools') {
            steps {
                script {
                    echo "Installing Python dependencies (boto3, PyYAML) and Ansible on Jenkins agent..."
                    sh '''
                        sudo apt-get update
                        sudo apt-get install -y python3-pip ansible
                        pip3 install boto3 PyYAML botocore
                    '''
                }
            }
        }

        stage('Determine Route 53 Hosted Zone ID') {
            steps {
                script {
                    def hostedZoneMap = [
                        'us-east-1': 'Z02747281NCEKDCVRYI6O',
                        'us-east-2': 'Z02747281NCEKDCVRYI6O',
                        'ap-south-1': 'Z02747281NCEKDCVRYI6O',
                        'eu-central-1': 'Z02747281NCEKDCVRYI6O'
                    ]

                    if (hostedZoneMap.containsKey(env.AWS_REGION)) {
                        // Assign to env.ROUTE53_HOSTED_ZONE_ID to make it accessible to subsequent shell steps
                        env.ROUTE53_HOSTED_ZONE_ID = hostedZoneMap[env.AWS_REGION]
                        echo "Determined Route 53 Hosted Zone ID for ${env.AWS_REGION}: ${env.ROUTE53_HOSTED_ZONE_ID}"
                    } else {
                        error "Unsupported AWS_REGION: ${env.AWS_REGION}. Please add its Hosted Zone ID to the map."
                    }
                }
            }
        }

        stage('Generate Ansible Inventories & Configure AWS Resources') {
            steps {
                script {
                    echo "Running automate_cluster_configuration.py script..."
                    sh """
                        python3 ${ANSIBLE_SETUP_ROOT}/scripts/automate_cluster_configuration.py \\
                        --region ${AWS_REGION} \\
                        --subservice ${SUBSERVICE_NAME} \\
                        --hosted-zone-id ${ROUTE53_HOSTED_ZONE_ID} # Pass the derived ID
                    """
                }
            }
        }

        stage('Run dp-instance-ansible Initial Setup (NTP, Disks)') {
            steps {
                script {
                    echo "Running dp-instance-ansible/playbooks/initial_setup.yml..."
                    withCredentials([sshUserPrivateKey(credentialsId: AWS_EC2_SSH_KEY_CRED_ID, keyFileVariable: 'ANSIBLE_SSH_KEY_FILE')]) {
                        sh """
                            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \\
                            -i ${ANSIBLE_SETUP_ROOT}/dp-instance-ansible/inventory/hosts.ini \\
                            --private-key \$ANSIBLE_SSH_KEY_FILE \\
                            ${ANSIBLE_SETUP_ROOT}/dp-instance-ansible/playbooks/initial_setup.yml \\
                            --limit all
                        """
                    }
                }
            }
        }

        stage('Run cp-ansible Playbook (Kafka/Zookeeper Installation)') {
            steps {
                script {
                    echo "Running cp-ansible/all.yml for Kafka and Zookeeper installation..."
                    def cpAnsibleInventoryFile = "${ANSIBLE_SETUP_ROOT}/cp-ansible/staging/${AWS_REGION}/${SUBSERVICE_NAME}-hosts.yml"

                    withCredentials([sshUserPrivateKey(credentialsId: AWS_EC2_SSH_KEY_CRED_ID, keyFileVariable: 'ANSIBLE_SSH_KEY_FILE')]) {
                        sh """
                            echo "Running cp-ansible for Zookeeper..."
                            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \\
                            -i ${cpAnsibleInventoryFile} \\
                            --private-key \$ANSIBLE_SSH_KEY_FILE \\
                            ${ANSIBLE_SETUP_ROOT}/cp-ansible/all.yml \\
                            --tags=zookeeper -e deployment_strategy=parallel

                            echo "Running cp-ansible for Kafka Broker..."
                            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \\
                            -i ${cpAnsibleInventoryFile} \\
                            --private-key \$ANSIBLE_SSH_KEY_FILE \\
                            ${ANSIBLE_SETUP_ROOT}/cp-ansible/all.yml \\
                            --tags=kafka_broker -e deployment_strategy=parallel

                            echo "Running cp-ansible for Schema Registry (if applicable)..."
                            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \\
                            -i ${cpAnsibleInventoryFile} \\
                            --private-key \$ANSIBLE_SSH_KEY_FILE \\
                            ${ANSIBLE_SETUP_ROOT}/cp-ansible/all.yml \\
                            --tags=schema_registry -e deployment_strategy=parallel
                        """
                    }
                }
            }
        }

        stage('Run dp-instance-ansible Post-Confluent Config') {
            steps {
                script {
                    echo "Running dp-instance-ansible/playbooks/post_confluent_config.yml..."
                    withCredentials([sshUserPrivateKey(credentialsId: AWS_EC2_SSH_KEY_CRED_ID, keyFileVariable: 'ANSIBLE_SSH_KEY_FILE')]) {
                        sh """
                            ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook \\
                            -i ${ANSIBLE_SETUP_ROOT}/dp-instance-ansible/inventory/hosts.ini \\
                            --private-key \$ANSIBLE_SSH_KEY_FILE \\
                            ${ANSIBLE_SETUP_ROOT}/dp-instance-ansible/playbooks/post_confluent_config.yml \\
                            --limit all
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished. Cleaning up workspace."
            cleanWs()
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed! Check logs for details."
        }
    }
}